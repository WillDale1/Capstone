# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i7yxW5fr0lXF_M8824vUQW6wmp2oRI5S
"""

import csv 
import random 
#import pygame 
import os 
import matplotlib.pyplot as plt 
import pandas as pd 
from math import pi 
from openpyxl import load_workbook
from google.colab import files 
uploaded = files.upload()

### NOTES: 
# Add Stavros comment, more visualizations, and ways to read how many times we played songs
# Ask user to choose genre per Stavros 

# ----------------------------------------------------------------------------------------------------------------

def likeButton(UIN): # calling this function will allow user to like a song 
    
  wb = load_workbook("master.xlsx")
  sheet = wb.worksheets[0]
  songName = str(input("What song would you like to like? (Include the exact name of desired song): "))
  rowSel = 2
  counter = 4
  while sheet.cell(row=2,column=counter).value is not None: # this loops through list and compares against user entry
    if UIN == sheet.cell(row=2,column=counter).value: 
      print("counter val: ", counter)

      while sheet.cell(row=rowSel,column=counter+1).value != songName: # runs UNTIL we hit the correct song
        print(sheet.cell(row=rowSel,column=counter+1).value)
        rowSel += 1 # moves on to the next song of the ten 

      if sheet.cell(row=rowSel, column=counter+9).value == 0: # this loop compensates for when there's no value in the like cell
        sheet.cell(row=rowSel, column=counter+9).value = 1

      else: 
        cellVal = sheet.cell(row=rowSel, column=counter+9).value
        sheet.cell(row=rowSel, column=counter+9).value = cellVal+1
      print("Song is now liked by user", UIN)
      wb.save("master.xlsx")
      return
    else: 
      counter += 12

  wb.save("master.xlsx")

# ----------------------------------------------------------------------------------------------------------------

def dislikeButton(UIN): # calling this function will allow user to dislike a song

  wb = load_workbook("master.xlsx")
  sheet = wb.worksheets[0]
  songName = str(input("What song would you like to dislike? (Include the exact name of desired song): "))
  rowSel = 1
  counter = 4
  while sheet.cell(row=2,column=counter).value is not None: # this loops through list and compares against user entry
    if UIN == sheet.cell(row=2,column=counter).value: # confirms UIN is what we entered from input 
      # need to put song-searching for loop here. 
      while sheet.cell(row=rowSel,column=counter+1).value != songName: # runs UNTIL we hit the correct song
        print("rowSel: ", rowSel)
        rowSel += 1 # moves on to the next song of the ten 

      if sheet.cell(row=rowSel, column=counter+10).value is None: # looks @ "like" cell and sets first val to 1 like
        sheet.cell(row=rowSel, column=counter+10).value = 1
      else: 
        cellVal = sheet.cell(row=rowSel, column=counter+10).value
        sheet.cell(row=rowSel, column=counter+10).value = cellVal+1
      print("Song is now disliked by user", UIN)
      wb.save("master.xlsx")
      return
    else: 
      counter += 12


  wb.save("master.xlsx") 
  print("Song is now skipped") 
  #skipSong()  # need to define and implement per Swarnabha 
  return 

# ----------------------------------------------------------------------------------------------------------------

def weightUpdate(): 
  wb = load_workbook("master.xlsx")
  sheet = wb.worksheets[0]

  counter = 4
  
  
  while sheet.cell(row=2,column=counter).value is not None: # this loops through list and compares against user entry
    #print("column counter: ",counter)
    periodList = ['morning', 'afternoon', 'evening', 'night']
    rowSel = 2
    #print("song name ", sheet.cell(row=rowSel,column=counter+1).value)
    while sheet.cell(row=rowSel,column=counter+1).value is not None: # this loops through all rows when arriving 
      #print("row loop iteration")
      likeVal = sheet.cell(row=rowSel,column=counter+9).value
      print(likeVal)
      dislikeVal = sheet.cell(row=rowSel,column=counter+10).value
      #print(dislikeVal)
      if (likeVal == 0) and (dislikeVal == 0): 
        #print("if statement & rowSel iteration")
        rowSel += 1
        continue 
      #print("past if loop")

      likeVal = float(sheet.cell(row=rowSel,column=counter+9).value) 
      dislikeVal = float(sheet.cell(row=rowSel,column=counter+10).value)
      if likeVal >= 3: 
        periodVal = sheet.cell(row=rowSel,column=counter+8).value
        sheet.cell(row=rowSel,column=counter+9).value = 0 # might need to put this? TBD.
        # after this, need code to set recommendations/move around liked songs 
        refEnergy, refAcoustic, refDance, refSpeech, refInstr = sheet.cell(row=rowSel,column=counter+4).value, sheet.cell(row=rowSel,column=counter+3).value, sheet.cell(row=rowSel,column=counter+5).value, sheet.cell(row=rowSel,column=counter+7).value, sheet.cell(row=rowSel,column=counter+6).value
        rowSel2 = 2
        while sheet.cell(row=rowSel2,column=counter+1).value is not None: # Should be finished after 5 if statements are refined. 

          weightCounter = 0
          print("acoustic: ", sheet.cell(row=rowSel2,column=counter+3).value - refAcoustic)

          if (abs(sheet.cell(row=rowSel2,column=counter+3).value - refAcoustic) <= 0.1):
            weightCounter += 1

          if (abs(sheet.cell(row=rowSel2,column=counter+4).value - refEnergy) <= 0.1):
            weightCounter += 1

          if (abs(sheet.cell(row=rowSel2,column=counter+5).value - refDance) <= 0.1):
            weightCounter += 1

          if (abs(sheet.cell(row=rowSel2,column=counter+6).value - refInstr) <= 0.1):
            weightCounter += 1

          if (abs(sheet.cell(row=rowSel2,column=counter+7).value - refSpeech) <= 0.1):
            weightCounter += 1
          print("weight counter: ", weightCounter)
          if weightCounter >= 3: 
            sheet.cell(row=rowSel2,column=counter+8).value = periodVal
            print("period change made")

          rowSel2 += 1
         
      
      elif dislikeVal >= 3: 
        periodVal = sheet.cell(row=rowSel,column=counter+8).value
        periodList.remove(periodVal)
        randIndex = random.randrange(len(periodList)) 
        sheet.cell(row=rowSel,column=counter+8).value = periodList[randIndex] # this assigns a random period to the song after multiple dislikes
        sheet.cell(row=rowSel,column=counter+10).value = 0 # returns dislike value to 0 in anticipation of new period trial    

      rowSel += 1 
    #print(sheet.cell(row=2,column=counter+12).value)
    counter += 12
  wb.save("master.xlsx")
  return 

# ----------------------------------------------------------------------------------------------------------------

def getProfList(UIN):
  wb = load_workbook("master.xlsx")
  sheet = wb.worksheets[0]

  count = 0
  number = UIN

  while (number > 0):
    number = number//10
    count = count + 1
  
  if count != 9: 
    print("Please re-enter a proper UIN.")
    return 

  valCounter = 2
  profList = []
  while True: 
    cellVal = sheet.cell(row=valCounter, column=1).value
    valCounter += 1

    if cellVal is None: # breaks while loop if detecting nothing 
      break
    profList.append(cellVal)

  matchFlag = 0 # this shows us whether or not we have a match, don't think this is needed

  for i in profList: # this loops through list and compares against user entry
    if UIN == i: 
      matchFlag = 1 # confirmation of match, don't think this is needed
      print("Existing User, pulling data now.")
      wb.save("master.xlsx")
      return

### Everything past here is to add a new profile ### 
  if matchFlag == 0: # loop to add new profile 
    cellVal = sheet.cell(row=valCounter-1, column=1).value = UIN # writes UIN into sheet on first column
    profList.append(cellVal) 
    columnCounter = 4
    while True: # loops until we find empty cell 
      cellVal2 = sheet.cell(row=2, column=columnCounter).value
      #print(cellVal2)
      if cellVal2 is None: 
        sheet.cell(row=1,column=columnCounter).value = "UIN"
        sheet.cell(row=2,column=columnCounter).value = UIN
        sheet.cell(row=1,column=columnCounter+1).value = "song"
        # going to need loop to put all songs into song list 
        sheet.cell(row=1,column=columnCounter+2).value = "duration"
        sheet.cell(row=1,column=columnCounter+3).value = "acousticness"
        sheet.cell(row=1,column=columnCounter+4).value = "energy"
        sheet.cell(row=1,column=columnCounter+5).value = "danceability"
        sheet.cell(row=1,column=columnCounter+6).value = "instrumentalness"
        sheet.cell(row=1,column=columnCounter+7).value = "speechiness"
        sheet.cell(row=1,column=columnCounter+8).value = "period"
        sheet.cell(row=1,column=columnCounter+9).value = "like"
        sheet.cell(row=1,column=columnCounter+10).value = "dislike"
        # need to put code to write in text 
        break 
      else: # entry to this means we are moving on to the next column for profile addition 
        #print(columnCounter)
        columnCounter += 12
        
  print("The new database consists of: ",profList)
  wb.save("master.xlsx")   

# ----------------------------------------------------------------------------------------------------------------   

def showAnalysis(UIN): # function to plot radar chart
# need to think of a way to get individual values for all the song's in a profile 
# need to implement UIN variable. 
  
  ### block of code to get row and column counters to correct positions: 
  counter = 4 
  rowCounter = 2 
  num = 0
  wb = load_workbook("master.xlsx")
  sheet = wb.worksheets[0]
  num1 = 0
  num2 = 0
  num3 = 0
  num4 = 0
  num5 = 0
  i = 0
  while sheet.cell(row=2,column=counter).value is not None: # this loops through list and compares against user entry
    # print("while iteration")
    # print(sheet.cell(row=2,column=counter).value)
    if UIN == sheet.cell(row=2,column=counter).value: # this will get us to the cell at our desired UIN 

    # Need to add axis value generation in here. Potential is we take each attribute and plot on bar chart. X Axis = 0.0 to 1.0, and Y Axis is # of Songs 
      
      for i in range(10): 
        
        num1 += float(sheet.cell(row=rowCounter+i,column=counter+3).value)
        #print(type(num1)) # this value is wrong. 
        num2 += float(sheet.cell(row=rowCounter+i,column=counter+4).value)
        num3 += float(sheet.cell(row=rowCounter+i,column=counter+5).value)
        num4 += float(sheet.cell(row=rowCounter+i,column=counter+6).value)
        num5 += float(sheet.cell(row=rowCounter+i,column=counter+7).value)

      numAvg1 = num1 / 10 # this will get us the avg number of acousticness so that we can plot it
      #print(numAvg1)
      numAvg2 = num2 / 10
      numAvg3 = num3 / 10
      numAvg4 = num4 / 10
      numAvg5 = num5 / 10
      #print(numAvg1)
      break # this breaks the while loop whenever we are able to get all avgs for graph to prevent infinite looping 
    else: 
      counter += 12 
     
  wb.save("master.xlsx")
  ###


  df = pd.DataFrame({
  'group': ['A'],
  'instrumentalness': [numAvg4],
  'energy': [numAvg3],
  'speechiness': [numAvg5],
  'danceability': [numAvg2],
  'acousticness': [numAvg1]
  })

  # number of variable
  categories=list(df)[1:]
  N = len(categories)

  # We are going to plot the first line of the data frame.
  # But we need to repeat the first value to close the circular graph:
  values=df.loc[0].drop('group').values.flatten().tolist()
  values += values[:1]
  values

  # What will be the angle of each axis in the plot? (we divide the plot / number of variable)
  angles = [n / float(N) * 2 * pi for n in range(N)]
  angles += angles[:1]

  # Initialise the spider plot
  ax = plt.subplot(111, polar=True)
 
  # Draw one axe per variable + add labels
  plt.xticks(angles[:-1], categories, color='grey', size=8)
 
  # Draw ylabels
  ax.set_rlabel_position(0)
  plt.yticks([0.25,0.50,0.75], ["0.25","0.50","0.75"], color="grey", size=7)
  plt.ylim(0,1.2)
 
  # Plot data
  ax.plot(angles, values, linewidth=1, linestyle='solid')
 
  # Fill area
  ax.fill(angles, values, 'b', alpha=0.1)

  # Show the graph
  plt.title(UIN)
  plt.show()
  
  return 

# ----------------------------------------------------------------------------------------------------------------

### MAIN ### 

userIN = int(input("Input your 9-digit UIN: "))
#getProfList(userIN)
#likeButton(userIN)
#dislikeButton(userIN)
#showAnalysis(userIN)
#weightUpdate()

""